pipeline {
    agent any
    environment {
        GIT_REPO = 'https://github.com/Megha18181/Jenkinsandjava.git'
        AWS_REGION = 'us-east-1'
        ECR_REPO_NAME = 'jenkinsandjava'
        ECR_PUBLIC_REPO_URI = 'public.ecr.aws/f5m4u7g5/jenkinsandjava'
        IMAGE_TAG = 'latest'
        IMAGE_URI = "public.ecr.aws/f5m4u7g5/jenkinsandjava:${IMAGE_TAG}"
        AWS_ACCOUNT_ID = '312983085423'
        EKS_CLUSTER = 'my-eks-cluster'
    }
    stages {
        
        stage('Configure AWS Credentials') {
            steps {
                script {
                    sh '''
                        echo "Setting up AWS credentials for Jenkins..."
                        whoami
                        pwd
                        mkdir -p /var/lib/jenkins/.aws
                        echo "[default]" > /var/lib/jenkins/.aws/credentials
                        echo "aws_access_key_id=AKIAUR" >> /var/lib/jenkins/.aws/credentials
                        echo "aws_secret_access_key=37NEpkT" >> /var/lib/jenkins/.aws/credentials
                        chown -R jenkins:jenkins /var/lib/jenkins/.aws
                    '''
                }
            }
        }
        stage('Clone Repository') {
            steps {
                git url: "${GIT_REPO}", branch: 'main'
            }
        }
        
        stage('Login to AWS ECR') {
            steps {
                script {
                    sh '''
                        echo "Logging into AWS ECR..."
                        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
                    '''
                }
            }
        }
         stage('Build') {
            steps {
                script {
                    sh '''
                        echo "Building Java application..."
                        mvn clean -B -Denforcer.skip=true package
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                        echo "Building Docker image..."
                        docker build -t ${IMAGE_URI} .
                    '''
                }
            }
        }
       
        stage('Push Docker Image to ECR') {
            steps {
                script {
                    sh '''
                        echo "Pushing Docker image to ECR..."
                        docker push ${IMAGE_URI}
                    '''
                }
            }
        }
        
          stage('Deploy to EKS') {
            steps {
                script {
                    sh '''
                        echo "Updating kubeconfig..."
                        mkdir -p /var/lib/jenkins/.kube
                        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER --kubeconfig /var/lib/jenkins/.kube/config
                        export KUBECONFIG=/var/lib/jenkins/.kube/config

                        echo "Applying Kubernetes manifests..."
                        kubectl apply -f Jenkinsandjava/deploymentjava.yaml --validate=false
                        kubectl apply -f Jenkinsandjava/servicelb.yaml --validate=false
                    '''
                }
            }
        }
    }
}


